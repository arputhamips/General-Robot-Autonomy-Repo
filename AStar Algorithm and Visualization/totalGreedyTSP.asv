function tours = totalGreedyTSP(costMatrix, startId)

nodes = setdiff(1:N, startId);      
orders = perms(nodes);              
orders = [repmat(startId, size(orders,1), 1), orders]; 

min_cost = inf;
best_order = [];

for k = 1:size(orders,1)
    order = orders(k,:);
    cost = 0;
    for i = 1:N-1
        cost = cost + costs(order(i), order(i+1));
    end
    if close_loop
        cost = cost + costs(order(N), order(1));
    end

    if cost < min_cost
        min_cost = cost;
        best_order = order;
    end
end

% Construct full route
tours = [];
for i = 1:N-1
    from = best_order(i);
    to = best_order(i+1);
    segment = paths{from, to};
    if ~isempty(tours)
        segment = segment(2:end,:); % Avoid duplication
    end
    tours = [tours; segment];
end

% Add final return to start if needed
if close_loop
    from = best_order(end);
    to = best_order(1);
    segment = paths{from, to};
    segment = segment(2:end,:);
    tours = [tours; segment];
end
end
end